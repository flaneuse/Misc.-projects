plotMap(adm1_df)
# Cambodia Adm2 data ------------------------------------------------------
adm2 = shp2csv(workingDir = '~/Documents/USAID/mini projects/tableaupolygonsfromshapefiles/khm_admbnda_adm2_gov',
layerName = "khm_admbnda_adm2_gov",
exportData = TRUE)
adm2_df = adm2$df
plotMap(adm2_df)
# Cambodia Adm3 data ------------------------------------------------------
adm3 = shp2csv(workingDir = '~/Documents/USAID/mini projects/tableaupolygonsfromshapefiles/khm_admbnda_adm3_gov',
layerName = "khm_admbnda_adm3_gov",
exportData = TRUE)
adm3_df = adm3$df
plotMap(adm3_df)
ggplot(adm1_df, aes(x = long,
y = lat)) +
geom_polygon(aes(group = group,
fill = fakeIndicator)) +
coord_equal() +
theme_void() +
geom_polygon(mapping = aes(group = group),
data = lakes_df, fill = 'dodgerblue') +
geom_path(aes(group = group), colour = '#525252', size = 0.1) +
geom_text(aes(label = label),
data = adm1_centroids,
size = 2,
colour = '#525252') # set label to be the 'label' variable within adm1_ centroids; s
adm1_df = ad1m_df
ggplot(adm1_df, aes(x = long,
y = lat)) +
geom_polygon(aes(group = group,
fill = fakeIndicator)) +
coord_equal() +
theme_void() +
geom_polygon(mapping = aes(group = group),
data = lakes_df, fill = 'dodgerblue') +
geom_path(aes(group = group), colour = '#525252', size = 0.1) +
geom_text(aes(label = label),
data = adm1_centroids,
size = 2,
colour = '#525252') # set label to be the 'label' variable within adm1_ centroids; s
adm1_df=adm1_df %>% mutate(fakeIndicator = 2)
ggplot(adm1_df, aes(x = long,
y = lat)) +
geom_polygon(aes(group = group,
fill = fakeIndicator)) +
coord_equal() +
theme_void() +
geom_polygon(mapping = aes(group = group),
data = lakes_df, fill = 'dodgerblue') +
geom_path(aes(group = group), colour = '#525252', size = 0.1) +
geom_text(aes(label = label),
data = adm1_centroids,
size = 2,
colour = '#525252') # set label to be the 'label' variable within adm1_ centroids; s
setwd('~/Documents/USAID/mini projects/tableaupolygonsfromshapefiles/khm_admbnda_adm1_gov')
# the dsn argument of '.' says to look for the layer in the current directory.
rawAdm1 = rgdal::readOGR(dsn=".", layer="khm_admbnda_adm1_gov")
# --- CAMBODIA BODIES OF WATER ---
setwd('~/Documents/USAID/mini projects/tableaupolygonsfromshapefiles/khm_WatrcrsA_wfp/')
# the dsn argument of '.' says to look for the layer in the current directory.
rawLakes = rgdal::readOGR(dsn=".", layer="khm_WatrcrsA_wfp")
adm1_decimal = spTransform(rawAdm1, CRS("+proj=longlat"))
adm1_decimal@data$id = rownames(adm1_decimal@data)
# Convert the shape polygons into a series of lat/lon coordinates.
adm1_points = ggplot2::fortify(adm1_decimal, region="id")
# Merge the polygon lat/lon points with the original data
adm1_df = dplyr::left_join(adm1_points, adm1_decimal@data, by="id")
# --- LAKES ---
# pull out the row names from the data and save it as a new column called 'id'
rawLakes@data$id = rownames(rawLakes@data)
lakes_points = ggplot2::fortify(rawLakes, region="id")
lakes_df = dplyr::left_join(lakes_points, rawLakes@data, by="id")
adm1_centroids = data.frame(coordinates(adm1_decimal)) %>%
rename(long = X1, lat = X2)
adm1_centroids = cbind(adm1_centroids,
HRName = adm1_decimal@data$HRName) # The name of the province is in the HRName variables.
fakeData = data.frame(HRName = adm1_decimal@data$HRName)
# generate some random data
fakeData = fakeData %>%
rowwise() %>%
mutate(fakeIndicator = sample(1:100,1))
# merge the data together
adm1_df = left_join(adm1_df, fakeData, by = 'HRName')
ggplot(adm1_df, aes(x = long,
y = lat)) +
geom_polygon(aes(group = group,
fill = fakeIndicator)) +
coord_equal() +
theme_void() +
geom_polygon(mapping = aes(group = group),
data = lakes_df, fill = 'dodgerblue') +
geom_path(aes(group = group), colour = '#525252', size = 0.1) +
geom_text(aes(label = label),
data = adm1_centroids,
size = 2,
colour = '#525252') # set label to be the 'label' variable within adm1_ centroids; size is in mm
ggplot(adm1_df, aes(x = long,
y = lat)) +
geom_polygon(aes(group = group,
fill = fakeIndicator)) +
coord_equal() +
theme_void() +
geom_polygon(mapping = aes(group = group),
data = lakes_df, fill = 'dodgerblue') +
geom_path(aes(group = group), colour = '#525252', size = 0.1)
colnames(adm1_centroids)
colnames(adm1_centroids)
summary(rawAdm1)
summary(rawLakes)
projInfo(type = "ellps")
projInfo(type = "datum")
lakes_decimal = spTransform(rawLakes, CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +init=epsg:3148"))
```
adm1_decimal = spTransform(rawAdm1, CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +init=epsg:3148"))
lakes_decimal = spTransform(rawLakes, CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +init=epsg:3148"))
is.projected(rawAdm1)
is.projected(rawLakes)
compareCRS(rawLakes, rawAdm1)
raster::compareCRS(rawLakes, rawAdm1)
raster::compareCRS(rawLakes, lakes_decimal)
rawLakes@bbox
lakes_decimal@bbox
adm1_decimal = spTransform(rawAdm1, CRS("+init=epsg:3148"))
lakes_decimal = spTransform(rawLakes, CRS("+init=epsg:3148"))
lakes_decimal@bbox
CRS("+init=epsg:4326")
CRS("+init=epsg:3148")
summary(rawAdm1)
rawAdm1@proj4string
adm1_decimal = spTransform(rawAdm1, CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
adm1_decimal@proj4string
rawAdm1@proj4string
adm1_decimal@proj4string
# load packages -----------------------------------------------------------
library(rgdal)
library(maptools)
library(rgeos)
library(dplyr)
library(ggplot2)
# Import shapefile data --------------------------------------------------------
# The process of converting any shapefile --> lat/lon points follows the same format for all:
# 1. use readOGR to read in the shapefile
# 2. pull out the row names and make into an id variable
# 3. use fortify to convert convert
# 4. merge the lat/lons with associated data from the original shapefile
# 5. save to .csv
# Here, I've made a little function that you can use to do this for you.
shp2csv = function(workingDir = getwd(),
layerName,
exportData = TRUE,
fileName = layerName,
labelVar = NA,
projection = '+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0'){
# Change directory to the file folder containing the shape file
setwd(workingDir)
# the dsn argument of '.' says to look for the layer in the current directory.
rawShp = rgdal::readOGR(dsn=".", layer = layerName)
# reproject the data
projectedShp = spTransform(rawShp, CRS(projection))
# pull out the row names from the data and save it as a new column called 'id'
projectedShp@data$id = rownames(projectedShp@data)
# Convert the shape polygons into a series of lat/lon coordinates.
poly_points = ggplot2::fortify(projectedShp, region="id")
# Merge the polygon lat/lon points with the original data
df = dplyr::left_join(poly_points, projectedShp@data, by="id")
# Pull out the centroids and the associated names.
centroids = data.frame(coordinates(projectedShp)) %>%
rename(long = X1, lat = X2)
if(!is.na(labelVar)){
if(labelVar %in% colnames(projectedShp@data)){
# Merge the names with the centroids
centroids = cbind(centroids,
projectedShp@data[labelVar]) %>%
rename_(label  = labelVar) # rename the column
} else{
warning('label variable for the centroids is not in the raw shapefile')
}
}
# if the 'exportData' option is selected, save the lat/lon coordinates as a .csv
if (exportData == TRUE){
write.csv(df, paste0(workingDir, '/', fileName, '.csv'))
write.csv(centroids, paste0(workingDir, '/', fileName, '_centroids.csv'))
}
# Return the dataframe containing the coordinates and the centroids
return(list(df = df, centroids = centroids))
}
# Basic plot function to check that the data look correct -----------------
# Note: if you have lots of complex polygons, it'll take awhile to plot.
# In that case, it's easier to save the plot to a variable and export the plot as a .pdf
# Don't be alarmed if the function takes a minute or two to render
plotMap = function(df,
exportPlot = FALSE,
fileName = 'map.pdf',
plotWidth = 6,
plotHeight = 6){
p = ggplot(df, aes(x = long,
y = lat,
group = group,
fill = id)) +
geom_polygon() +
theme_void() +
coord_equal() +
theme(legend.position = 'none')
if (exportPlot == TRUE) {
ggsave(filename = fileName,
width = plotWidth, height = plotHeight,
bg = 'transparent',
paper = 'special',
units = 'in',
useDingbats=FALSE,
compress = FALSE,
dpi = 300)
}
return(p)
}
# Cambodia lakes/rivers data ------------------------------------------------------
lakes = shp2csv(workingDir = '~/Documents/USAID/mini projects/tableaupolygonsfromshapefiles/khm_WatrcrsA_wfp',
layerName = "khm_WatrcrsA_wfp",
exportData = TRUE)
lakes_df = lakes$df
plotMap(lakes_df)
# Cambodia Adm1 data ------------------------------------------------------
adm1 = shp2csv(workingDir = '~/Documents/USAID/mini projects/tableaupolygonsfromshapefiles/khm_admbnda_adm1_gov',
layerName = 'khm_admbnda_adm1_gov',
labelVar = 'HRName',
exportData = TRUE)
adm1_df = adm1$df
adm1_centroids = adm1$centroids
plotMap(adm1_df)
# Cambodia Adm2 data ------------------------------------------------------
adm2 = shp2csv(workingDir = '~/Documents/USAID/mini projects/tableaupolygonsfromshapefiles/khm_admbnda_adm2_gov',
layerName = "khm_admbnda_adm2_gov",
exportData = TRUE)
adm2_df = adm2$df
plotMap(adm2_df)
# Cambodia Adm3 data ------------------------------------------------------
adm3 = shp2csv(workingDir = '~/Documents/USAID/mini projects/tableaupolygonsfromshapefiles/khm_admbnda_adm3_gov',
layerName = "khm_admbnda_adm3_gov",
exportData = TRUE)
adm3_df = adm3$df
plotMap(adm3_df)
# load packages -----------------------------------------------------------
pkgs = c('dplyr', 'rgdal', 'maptools', 'rgeos', 'ggplot2', 'RColorBrewer')
# Check if the packages have been installed.`
alreadyInstalled = installed.packages()[,'Package']
toInstall = pkgs[!pkgs %in% alreadyInstalled]
# Install anything that isn't already installed.
if(length(toInstall > 0)) {
print(paste0('Installing these packages: ', toInstall))
install.packages(toInstall)
}
library(rgdal)
library(maptools)
library(rgeos)
library(dplyr)
library(ggplot2)
# Import shapefile data --------------------------------------------------------
# The process of converting any shapefile --> lat/lon points follows the same format for all:
# 1. use readOGR to read in the shapefile
# 2. pull out the row names and make into an id variable
# 3. use fortify to convert convert
# 4. merge the lat/lons with associated data from the original shapefile
# 5. save to .csv
# Here, I've made a little function that you can use to do this for you.
shp2csv = function(workingDir = getwd(),
layerName,
exportData = TRUE,
fileName = layerName,
labelVar = NA,
projection = '+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0'){
# Change directory to the file folder containing the shape file
setwd(workingDir)
# the dsn argument of '.' says to look for the layer in the current directory.
rawShp = rgdal::readOGR(dsn=".", layer = layerName)
# reproject the data
projectedShp = spTransform(rawShp, CRS(projection))
# pull out the row names from the data and save it as a new column called 'id'
projectedShp@data$id = rownames(projectedShp@data)
# Convert the shape polygons into a series of lat/lon coordinates.
poly_points = ggplot2::fortify(projectedShp, region="id")
# Merge the polygon lat/lon points with the original data
df = dplyr::left_join(poly_points, projectedShp@data, by="id")
# Pull out the centroids and the associated names.
centroids = data.frame(coordinates(projectedShp)) %>%
rename(long = X1, lat = X2)
if(!is.na(labelVar)){
if(labelVar %in% colnames(projectedShp@data)){
# Merge the names with the centroids
centroids = cbind(centroids,
projectedShp@data[labelVar]) %>%
rename_(label  = labelVar) # rename the column
} else{
warning('label variable for the centroids is not in the raw shapefile')
}
}
# if the 'exportData' option is selected, save the lat/lon coordinates as a .csv
if (exportData == TRUE){
write.csv(df, paste0(workingDir, '/', fileName, '.csv'))
write.csv(centroids, paste0(workingDir, '/', fileName, '_centroids.csv'))
}
# Return the dataframe containing the coordinates and the centroids
return(list(df = df, centroids = centroids))
}
# Basic plot function to check that the data look correct -----------------
# Note: if you have lots of complex polygons, it'll take awhile to plot.
# In that case, it's easier to save the plot to a variable and export the plot as a .pdf
# Don't be alarmed if the function takes a minute or two to render
plotMap = function(df,
exportPlot = FALSE,
fileName = 'map.pdf',
plotWidth = 6,
plotHeight = 6){
p = ggplot(df, aes(x = long,
y = lat,
group = group,
fill = id)) +
geom_polygon() +
theme_void() +
coord_equal() +
theme(legend.position = 'none')
if (exportPlot == TRUE) {
ggsave(filename = fileName,
width = plotWidth, height = plotHeight,
bg = 'transparent',
paper = 'special',
units = 'in',
useDingbats=FALSE,
compress = FALSE,
dpi = 300)
}
return(p)
}
# Cambodia lakes/rivers data ------------------------------------------------------
lakes = shp2csv(workingDir = '~/Documents/USAID/mini projects/tableaupolygonsfromshapefiles/khm_WatrcrsA_wfp',
layerName = "khm_WatrcrsA_wfp",
exportData = TRUE)
lakes_df = lakes$df
plotMap(lakes_df)
# Cambodia Adm1 data ------------------------------------------------------
adm1 = shp2csv(workingDir = '~/Documents/USAID/mini projects/tableaupolygonsfromshapefiles/khm_admbnda_adm1_gov',
layerName = 'khm_admbnda_adm1_gov',
labelVar = 'HRName',
exportData = TRUE)
adm1_df = adm1$df
adm1_centroids = adm1$centroids
plotMap(adm1_df)
# Cambodia Adm2 data ------------------------------------------------------
adm2 = shp2csv(workingDir = '~/Documents/USAID/mini projects/tableaupolygonsfromshapefiles/khm_admbnda_adm2_gov',
layerName = "khm_admbnda_adm2_gov",
exportData = TRUE)
adm2_df = adm2$df
plotMap(adm2_df)
# Cambodia Adm3 data ------------------------------------------------------
adm3 = shp2csv(workingDir = '~/Documents/USAID/mini projects/tableaupolygonsfromshapefiles/khm_admbnda_adm3_gov',
layerName = "khm_admbnda_adm3_gov",
exportData = TRUE)
adm3_df = adm3$df
plotMap(adm3_df)
projInfo(type = "datum")
rawAdm1@proj4string
rawAdm1 = rgdal::readOGR(dsn=".", layer="khm_admbnda_adm1_gov")
setwd('~/Documents/USAID/mini projects/tableaupolygonsfromshapefiles/khm_admbnda_adm1_gov')
# the dsn argument of '.' says to look for the layer in the current directory.
rawAdm1 = rgdal::readOGR(dsn=".", layer="khm_admbnda_adm1_gov")
# --- CAMBODIA BODIES OF WATER ---
setwd('~/Documents/USAID/mini projects/tableaupolygonsfromshapefiles/khm_WatrcrsA_wfp/')
# the dsn argument of '.' says to look for the layer in the current directory.
rawLakes = rgdal::readOGR(dsn=".", layer="khm_WatrcrsA_wfp")
rawAdm1@proj4string
rawLakes@proj4string
pkgs = c('dplyr', 'rgdal', 'maptools', 'rgeos', 'ggplot2', 'RColorBrewer')
# Check if the packages have been installed.`
alreadyInstalled = installed.packages()[,'Package']
toInstall = pkgs[!pkgs %in% alreadyInstalled]
# Install anything that isn't already installed.
if(length(toInstall > 0)) {
print(paste0('Installing these packages: ', toInstall))
install.packages(toInstall)
}
library(rgdal)
library(maptools)
library(rgeos)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
setwd('~/Documents/USAID/mini projects/tableaupolygonsfromshapefiles/khm_admbnda_adm1_gov')
setwd('~/Documents/USAID/mini projects/tableaupolygonsfromshapefiles/khm_admbnda_adm2_gov')
rawAdm1 = rgdal::readOGR(dsn=".", layer="khm_admbnda_adm1_gov")
rawAdm1 = rgdal::readOGR(dsn=".", layer="khm_admbnda_adm2_gov")
colnames(rawAdm1@data)
setwd('~/Documents/USAID/mini projects/tableaupolygonsfromshapefiles/khm_admbnda_adm3_gov')
rawAdm1 = rgdal::readOGR(dsn=".", layer="khm_admbnda_adm3_gov")
colnames(rawAdm1@data)
# load packages -----------------------------------------------------------
pkgs = c('dplyr', 'rgdal', 'maptools', 'rgeos', 'ggplot2', 'RColorBrewer')
# Check if the packages have been installed.`
alreadyInstalled = installed.packages()[,'Package']
toInstall = pkgs[!pkgs %in% alreadyInstalled]
# Install anything that isn't already installed.
if(length(toInstall > 0)) {
print(paste0('Installing these packages: ', toInstall))
install.packages(toInstall)
}
library(rgdal)
library(maptools)
library(rgeos)
library(dplyr)
library(ggplot2)
# Import shapefile data --------------------------------------------------------
# The process of converting any shapefile --> lat/lon points follows the same format for all:
# 1. use readOGR to read in the shapefile
# 2. pull out the row names and make into an id variable
# 3. use fortify to convert convert
# 4. merge the lat/lons with associated data from the original shapefile
# 5. save to .csv
# Here, I've made a little function that you can use to do this for you.
shp2csv = function(workingDir = getwd(),
layerName,
exportData = TRUE,
fileName = layerName,
labelVar = NA,
projection = '+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0'){
# Change directory to the file folder containing the shape file
setwd(workingDir)
# the dsn argument of '.' says to look for the layer in the current directory.
rawShp = rgdal::readOGR(dsn=".", layer = layerName)
# reproject the data
projectedShp = spTransform(rawShp, CRS(projection))
# pull out the row names from the data and save it as a new column called 'id'
projectedShp@data$id = rownames(projectedShp@data)
# Convert the shape polygons into a series of lat/lon coordinates.
poly_points = ggplot2::fortify(projectedShp, region="id")
# Merge the polygon lat/lon points with the original data
df = dplyr::left_join(poly_points, projectedShp@data, by="id")
# Pull out the centroids and the associated names.
centroids = data.frame(coordinates(projectedShp)) %>%
rename(long = X1, lat = X2)
if(!is.na(labelVar)){
if(labelVar %in% colnames(projectedShp@data)){
# Merge the names with the centroids
centroids = cbind(centroids,
projectedShp@data[labelVar]) %>%
rename_(label  = labelVar) # rename the column
} else{
warning('label variable for the centroids is not in the raw shapefile')
}
}
# if the 'exportData' option is selected, save the lat/lon coordinates as a .csv
if (exportData == TRUE){
write.csv(df, paste0(workingDir, '/', fileName, '.csv'))
write.csv(centroids, paste0(workingDir, '/', fileName, '_centroids.csv'))
}
# Return the dataframe containing the coordinates and the centroids
return(list(df = df, centroids = centroids))
}
# Basic plot function to check that the data look correct -----------------
# Note: if you have lots of complex polygons, it'll take awhile to plot.
# In that case, it's easier to save the plot to a variable and export the plot as a .pdf
# Don't be alarmed if the function takes a minute or two to render
plotMap = function(df,
exportPlot = FALSE,
fileName = 'map.pdf',
plotWidth = 6,
plotHeight = 6){
p = ggplot(df, aes(x = long,
y = lat,
group = group,
fill = id)) +
geom_polygon() +
theme_void() +
coord_equal() +
theme(legend.position = 'none')
if (exportPlot == TRUE) {
ggsave(filename = fileName,
width = plotWidth, height = plotHeight,
bg = 'transparent',
paper = 'special',
units = 'in',
useDingbats=FALSE,
compress = FALSE,
dpi = 300)
}
return(p)
}
# Cambodia lakes/rivers data ------------------------------------------------------
lakes = shp2csv(workingDir = '~/Documents/USAID/mini projects/tableaupolygonsfromshapefiles/khm_WatrcrsA_wfp',
layerName = "khm_WatrcrsA_wfp",
exportData = TRUE)
lakes_df = lakes$df
plotMap(lakes_df)
# Cambodia Adm1 data ------------------------------------------------------
adm1 = shp2csv(workingDir = '~/Documents/USAID/mini projects/tableaupolygonsfromshapefiles/khm_admbnda_adm1_gov',
layerName = 'khm_admbnda_adm1_gov',
labelVar = 'HRName',
exportData = TRUE)
adm1_df = adm1$df
adm1_centroids = adm1$centroids
plotMap(adm1_df)
# Cambodia Adm2 data ------------------------------------------------------
adm2 = shp2csv(workingDir = '~/Documents/USAID/mini projects/tableaupolygonsfromshapefiles/khm_admbnda_adm2_gov',
layerName = "khm_admbnda_adm2_gov",
labelVar = 'HRName',
exportData = TRUE)
adm2_df = adm2$df
plotMap(adm2_df)
# Cambodia Adm3 data ------------------------------------------------------
adm3 = shp2csv(workingDir = '~/Documents/USAID/mini projects/tableaupolygonsfromshapefiles/khm_admbnda_adm3_gov',
layerName = "khm_admbnda_adm3_gov",
labelVar = 'HRName',
exportData = TRUE)
adm3_df = adm3$df
plotMap(adm3_df)
